---
layout:       post
title:        "Git Tools"
subtitle:     "git usage"
date:         2018-07-12 21:52:00
author:       "GJXS"
header-img:   "img/in-post/2018.07/12/github.png"
catalog:      true
tags:
    - github
    - git
---
*****
>Abstract: "该教程主要是介绍git工具的一些基本的用法。"<br>                                                                                                                                                                             <br /> 

----------

### <center> <font face="楷体">Usage1:基本的用法 </font> </center>
1.<code>新建README.md</code>文件
```bash
echo "# Ridgeback" >> README.md 
```
2.<code>创建标准仓库</code>，这个步骤会在根目录下创建一个隐藏的.git
```bash
git init
```
3.<code>添加文件追踪</code>(<strong>.表示添加这个目录下的所有文件</strong>)
```bash
git add .  
```
4.<code>查看仓库状态</code>
```git
git status
```
5.<code>提交代码</code>
```bash
git commit -m "first commit"
```
>其中<code>first commit为说明文字</code>，可以改为其他的

6.<code>添加远程仓库</code>
```bash
git remote add origin <你项目仓库链接>
```
7.<code>推送代码</code>
```bash
git push -u origin master
```
>其中<code>master为分支名字</code>，可以改为其他的，第二次推送代码的时候，不用-u,即

```bash
git push origin master
```

*****
### <center> <font face="楷体">Usage2:分支改名</font> </center>
1.如果对于分支<code>不是当前分支</code>
```git
git branch -m 原名 新
```
2.如果<code>是当前分支</code>，那么可以使用加上新名字
```bash
git branch -m 原名 
```

*****

### <center> <font face="楷体">Usage3:删除本地分支和远程分支</font> </center>
1.<code>查看已有的本地及远程分支</code>
```git
git branch -a
```
2.<code>删除远程分支</code>
```git
git push origin --delete <分支名>
```
>如果是master分支，在github上<code>将master分支设置成不是default的分支才可以删除</code>

删除后，可再次查看分支情况
```git
git branch -a
```
3.<code>删除本地分支</code>
```git
git branch -d <分支名>
```
若分支有修改还未合并，会提示你还没合并，<code>强行删除本地分支</code>：
```git
git branch -D <分支名>
```
如果是<code>master分支</code>，则应该<code>先切换到新分支才可以删除master分支</code>
```git
git checkout <new_branch>
git branch -d master
```
删除后，可再次<code>查看分支情况</code>
```git
git branch -a
```

*****

### <center> <font face="楷体">Usage4:创建新分支及合并分支到主分支上</font> </center>
1.<code>创建新分支</code>
```git
git branch [new name]

# 查看分支是否创建成功
git branch -a

```

2.<code>切换到新分支</code>
```git
git checkout [new name]
```

3.<code>合并分支内容到主分支上</code>
```git
# 切换到主分支
git checkout master

# 把新分支的工作成果合并到master分支上
git merge [new name]

#  将本地代码提交到github
git push origin master
```

### <center> <font face="楷体">Usage5:用git下载文件</font> </center>
1.<code>下载整个项目</code>
```bash
git clone <项目的地址>
```
2.<code>下载单一的文件</code><br>
用<code>trunk代替链接中的tree/master</code>
```bash
svn co <修改后的项目地址>
#例如要下载QQ_wechat下的icon，把trunk代替链接中的tree/master
svn co https://github.com/GJXS1980/QQ_wechat/trunk/wechat/icon
```

*****

### <center> <font face="楷体">.gitignore的使用</font> </center>
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 1.忽略文件的原则 </font></center></strong>
<lu>
    <li> 忽略操作系统自动生成的文件，比如缩略图等； </li>
    <li> 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件； </li>
    <li> 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件 </li>
</lu>
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 2.使用方法 </font></center></strong>
首先，在你的<code>工作区新建一个名称为.gitignore的文件</code>。<br>
然后，<code>把要忽略的文件名填进去，Git就会自动忽略这些文件</code>。<br>
例子:
```git
*.class

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear

```

### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 3.查看.gitignore的规则 </font></center></strong>
如果你发现<code>.gitignore写得有问题</code>，需要找出来到底哪个规则写错了，可以<code>用git check-ignore命令检查</code>：
```git
git check-ignore -v <your_path>
```
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 4..gitignore规则不生效的解决办法 </font></center></strong>
把某些目录或文件加入忽略规则，<code>按照上述方法定义后发现并未生效</code>，原因是<code>.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未被追踪状态），然后再提交</code>：
```git
git rm -r --cached .
git add .
git commit -m 'update .gitignore'
```



