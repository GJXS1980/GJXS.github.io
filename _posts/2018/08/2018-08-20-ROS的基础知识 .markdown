---
layout:       post
title:        "ROS NOTE 2"
subtitle:     "ROS通信编程"
date:         2018-08-21 22:00:00
author:       "GJXS"
header-img:   "img/in-post/2018.08/21/21.jpg"
catalog:      true
tags:
    - ROS
    - 深蓝学院
    - 课程笔记
---
*****
>Abstract: "深蓝学院的课程学习笔记，第二讲：ROS基础知识中的ROS通信编程."<br>                                                                                                                                                                  <br /> 

----------
*************************
### <center> <font face="楷体">壹 . 话题编程</font> </center>
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 1.话题编程流程 </font></center></strong>
<ul>
<li>(1)创建发布者</li><br>
<li>(2)创建订阅者</li><br>
<li>(3)添加编译选项</li><br>
<li>(4)运行可执行程序</li><br>
</ul>
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 2.创建发布者 </font></center></strong>
<ul>
<li>(1)初始化ROS节点</li><br>
<li>(2)向ROS Master注册节点信息，包括发布的话题名和话题中的信息类型</li><br>
<li>(3)按照一定频率循环发布消息</li><br>
</ul>
例程(`talker.cpp`)如下：
```cpp
/**
 * 该例程将发布chatter话题，消息类型String
 */
 
#include <sstream>

#include "ros/ros.h"

#include "std_msgs/String.h"

int main(int argc, char **argv)
{
  ros::init(argc, argv, "talker");      // ROS节点初始化

  ros::NodeHandle n;               // 创建节点句柄
  
  // 创建一个Publisher，发布名为chatter的topic，消息类型为std_msgs::String

  ros::Publisher chatter_pub = n.advertise<std_msgs::String>("chatter", 1000);
  ros::Rate loop_rate(10);       // 设置循环的频率

  int count = 0;
  while (ros::ok())
  {
    // 初始化std_msgs::String类型的消息

    std_msgs::String msg;
    std::stringstream ss;
    ss << "hello world " << count;
    msg.data = ss.str();
    // 发布消息

    ROS_INFO("%s", msg.data.c_str());
    chatter_pub.publish(msg);
    ros::spinOnce();    // 循环等待回调函数
    
    loop_rate.sleep();     // 按照循环频率延时

    ++count;
  }

  return 0;
}

```
>分析
```cpp
#include "ros/ros.h"
```
>包含所有ROS系统要用到的头文件

>```cpp
#include "std_msgs/String.h"
```
>包含String.msg的头文件

>```cpp
ros::init(argc, argv, "talker");
```
>初始化ROS并命名节点

>```cpp
ros::NodeHandle n;
```
>为发布者节点创建一个句柄

>```cpp
ros::Publisher chatter_pub =
n.advertise<std_msgs::String>("chatter", 1000);
```
>告诉ROS Master将要发布一个消息类型为std msgs/String，名为chatter的话题,字符长度为1000

>```cpp
ros::Rate loop_rate(10);
```
>设置循环的频率

>```cpp
while (ros::ok())
```
接收Ctrl-C的输入，如果输入Ctrl-C就结束循环

>```cpp
std_msgs::String msg;
std::stringstream ss;
ss << "hello world " << count;
msg.data = ss.str();
```
将"hello world "赋给”data”

>```cpp
chatter_pub.publish(msg);
```
>开始发布消息

>```cpp
ROS_INFO("%s", msg.data.c_str());
```
>在终端打印和计数消息

>```cpp
ros::spinOnce();
```
>一次回调函数

>```cpp
loop_rate.sleep();
```
>以10hz频率发布消息之后延时，减轻计算机的内存负担

### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 3.创建订阅者 </font></center></strong>
<ul>
<li>(1)初始化ROS节点</li><br>
<li>(2)订阅需要的话题</li><br>
<li>(3)循环等待话题消息，接收到消息后进入回调函数</li><br>
<li>(4)在回调函数中完成消息处理</li><br>
</ul>
例程(`listener.cpp`)如下：
```cpp
/**
 * 该例程将订阅chatter话题，消息类型String
 */
 
#include "ros/ros.h"

#include "std_msgs/String.h"

// 接收到订阅的消息后，会进入消息回调函数

void chatterCallback(const std_msgs::String::ConstPtr& msg)
{
  ROS_INFO("I heard: [%s]", msg->data.c_str());     // 将接收到的消息打印出来

}
int main(int argc, char **argv)
{
  ros::init(argc, argv, "listener");      // 初始化ROS节点

  ros::NodeHandle n;            // 创建节点句柄

  // 创建一个Subscriber，订阅名为chatter的topic，注册回调函数chatterCallback

  ros::Subscriber sub = n.subscribe("chatter", 1000, chatterCallback);
  ros::spin();          // 循环等待回调函数    

  return 0;
}
```
>分析：
>```cpp
void chatterCallback(const std_msgs::String::ConstPtr& msg)
{
ROS_INFO("I heard: [%s]", msg->data.c_str());
}
```
>这个为回调函数，作用是当有新消息到达时回调函数就是发送I heard字符

>```cpp
  ros::Subscriber sub = n.subscribe("chatter", 1000, chatterCallback);
```
>从ROS Master订阅chatter话题；无论什么时候有新消息都调用回调函数；字符长度最大为1000

>```cpp
ros::spin();
```
>回调函数，当接收到消息时就进入循环，如果没有就等待

### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 4.编译代码 </font></center></strong>
<ul>
<li>(1)设置需要编译代码和生成的可执行文件</li><br>
<li>(2)设置链接库</li><br>
<li>(3)设置依赖</li><br>
</ul>
例程(`cmakelist.txt`)如下：
```cmake
add_executable(talker src/talker.cpp)
add_executable(listener src/listener.cpp)

target_link_libraries(talker ${catkin_LIBRARIES})
target_link_libraries(listener ${catkin_LIBRARIES})
```
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 5.运行可执行文件 </font></center></strong>
打开终端：
```bash
roscore
```
打开新终端：
```bash
rosrun learning_communication talker
```
打开新终端：
```bash
rosrun learning_communication listener
```
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 6.自定义话题消息 </font></center></strong>
<strong>步骤：</strong>
<ul>
<li>(0)在src目录下新建msg文件夹</li><br>
<li>(1)定义msg文件(Person.msg)</li>
</ul>
```msg
string name
uint8  sex
uint8  age

uint8 unknown = 0
uint8 male    = 1
uint8 female  = 2

```
(2)在`package.mxl`中添加功能包依赖
```xml
<build_depend>message_generation</build_depend>
<exec_depend>message_runtime</exec_depend>
<exec_depend>geometry_msgs</exec_depend>
```

(3)在`Cmakelists.txt`添加编译选项
```cmake
find_package( ...... message_generation)

catkin_package(CATKIN_DEPENDS geometry_msgs roscpp
rospy std_msgs message_runtime)

add_message_files(FILES Person.msg)
generate_messages(DEPENDENCIES std_msgs)
```
>说明：部分ROS版本中的`exec_depend`需要改为`run_depend`

(4)查看是否成功
```bash
rosmsg show Person
```

*************************
### <center> <font face="楷体">贰 . 服务编程</font> </center>
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 1.服务编程流程 </font></center></strong>
<ul>
<li>(1)创建服务器</li><br>
<li>(2)创建客户端</li><br>
<li>(3)添加编译选项</li><br>
<li>(4)运行可执行程序</li><br>
</ul>
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 2.自定义服务请求与应答 </font></center></strong>
(1)定义srv文件(`AddTwoInts.srv`)
```srv
int64 a
int64 b
---
int64 sum

```

>说明：三条横杆上面那部分是服务请求消息，下面那部分是应答消息

(2)在`package.xml`中添加功能包依赖
```xml
<build_depend>message_generation</build_depend>
<exec_depend>message_runtime</exec_depend>
```
(3)在`cmakelists.txt`添加编译选项
```cmake
find_package( ...... message_generation)

catkin_package(CATKIN_DEPENDS geometry_msgs roscpp
rospy std_msgs message_runtime)

add_service_files(FILES AddTwoInts.srv)
```
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 3.创建服务器 </font></center></strong>
<ul>
<li>(1)初始化ROS节点</li><br>
<li>(2)创建Server实例</li><br>
<li>(3)循环等待服务请求，进入回调函数</li><br>
<li>(4)在回调函数中完成服务功能的处理，并反馈应答数据</li><br>
</ul>
实例(`server.cpp`)如下：
```cpp
/**
 * AddTwoInts Server
 */
 
#include "ros/ros.h"

#include "learning_communication/AddTwoInts.h"

// service回调函数，输入参数req，输出参数res

bool add(learning_communication::AddTwoInts::Request  &req,
         learning_communication::AddTwoInts::Response &res)
{
  // 将输入参数中的请求数据相加，结果放到应答变量中

  res.sum = req.a + req.b;
  ROS_INFO("request: x=%ld, y=%ld", (long int)req.a, (long int)req.b);
  ROS_INFO("sending back response: [%ld]", (long int)res.sum);
  return true;
}
int main(int argc, char **argv)
{
  ros::init(argc, argv, "add_two_ints_server");    // ROS节点初始化

  ros::NodeHandle n;      // 创建节点句柄

  // 创建一个名为add_two_ints的server，注册回调函数add()

  ros::ServiceServer service = n.advertiseService("add_two_ints", add);
  // 循环等待回调函数

  ROS_INFO("Ready to add two ints.");
  ros::spin();
  return 0;
}
```
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 4.创建客户端 </font></center></strong>
<ul>
<li>(1)初始化ROS节点</li><br>
<li>(2)创建一个Client实例</li><br>
<li>(3)发布服务请求数据</li><br>
<li>(4)等待server处理之后的应答结果</li><br>
</ul>
实例(`client.cpp`)如下：
```cpp
/**
 * AddTwoInts Client
 */
 
#include <cstdlib>

#include "ros/ros.h"

#include "learning_communication/AddTwoInts.h"

int main(int argc, char **argv)
{
  ros::init(argc, argv, "add_two_ints_client");     // ROS节点初始化
  
  // 从终端命令行获取两个加数

  if (argc != 3)
  {
    ROS_INFO("usage: add_two_ints_client X Y");
    return 1;
  }

  ros::NodeHandle n;     // 创建节点句柄
  
  // 创建一个client，请求add_two_int service，service消息类型是learning_communication::AddTwoInts

  ros::ServiceClient client = n.serviceClient<learning_communication::AddTwoInts>("add_two_ints");

  // 创建learning_communication::AddTwoInts类型的service消息

  learning_communication::AddTwoInts srv;
  srv.request.a = atoll(argv[1]);
  srv.request.b = atoll(argv[2]);
  
  // 发布service请求，等待加法运算的应答结果

  if (client.call(srv))
  {
    ROS_INFO("Sum: %ld", (long int)srv.response.sum);
  }
  else
  {
    ROS_ERROR("Failed to call service add_two_ints");
    return 1;
  }
  return 0;
}
```
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 5.编译代码 </font></center></strong>
<ul>
<li>(1)设置需要编译的代码和生成的可执行文件</li><br>
<li>(2)设置链接库</li><br>
<li>(3)设置依赖</li><br>
</ul>
实例(`cmakelists.txt`)如下：
```cmake
add_executable(server src/server.cpp)
target_link_libraries(server ${catkin_LIBRARIES})
add_dependencies(server ${PROJECT_NAME}_gencpp)
add_executable(client src/client.cpp)
target_link_libraries(client ${catkin_LIBRARIES})
add_dependencies(client ${PROJECT_NAME}_gencpp)

```
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 6.运行可执行文件 </font></center></strong>
```bash
roscore
```
打开新终端：
```bash
rosrun learning_communication server
```
打开新终端：
```bash
rosrun learning_communication client 4 8
```

*************************
### <center> <font face="楷体">叁 . 动作编程</font> </center>
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 1.什么是动作编程 </font></center></strong>
<img src="http://pdpv2lxdq.bkt.clouddn.com/action.png" alt="action">
<p style="margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;caret-color: rgb(51, 51, 51);color: rgb(51, 51, 51);font-family: -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 17px;letter-spacing: 0.5440000295639038px;text-align: justify;white-space: normal;box-sizing: border-box !important;word-wrap: break-word !important;">
    <span style="max-width: 100%;font-size: 15px;letter-spacing: 1.600000023841858px;box-sizing: border-box !important;word-wrap: break-word !important;"></span>
    <span style="max-width: 100%;font-size: 10px;color: rgb(110, 194, 201);box-sizing: border-box !important;word-wrap: break-word !important;"></span>
    <span style="max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;"><span style="max-width: 100%;font-size: 10px;color: rgb(110, 194, 201);">○ &nbsp;</span><span style="max-width: 100%;color: rgb(136, 136, 136);font-size: 12px;letter-spacing: 1.600000023841858px;background-color: rgb(255, 255, 255);">图片来源：ROS基础知识__ROS通信编程</span>
</span>
<br>
</p>
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 2.自定义动作消息 </font></center></strong>
(1)定义action文件(`DoDishes.action`)
```
# Define the goal
uint32 dishwasher_id  # Specify which dishwasher we want to use
---
# Define the result
uint32 total_dishes_cleaned
---
# Define a feedback message
float32 percent_complete
```
(2)在`package.xml`中添加功能包依赖
```xml
<build_depend>actionlib</build_depend>
<build_depend>actionlib_msgs</build_depend>
<exec_depend>actionlib</exec_depend>
<exec_depend>actionlib_msgs</exec_depend>
```
(3)在`cmakelists.txt`添加编译选项
```cmake
find_package(catkin REQUIRED actionlib_msgs actionlib)
add_action_files(DIRECTORY action FILES DoDishes.action)
generate_messages(DEPENDENCIES actionlib_msgs)
```
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 3.实现一个动作服务器 </font></center></strong>
<ul>
<li>(1)初始化ROS节点</li><br>
<li>(2)创建动作服务器实例</li><br>
<li>(3)启动服务器，等待动作请求</li><br>
<li>(4)在回调函数中完成动作服务功能的处理，并反馈进度消息</li><br>
<li>(5)动作完成，发送结束消息</li><br>
</ul>
动作服务器实例(`DoDishes_server.cpp`)如下：
```cpp
#include <ros/ros.h>

#include <actionlib/server/simple_action_server.h>

#include "learning_communication/DoDishesAction.h"

typedef actionlib::SimpleActionServer<learning_communication::DoDishesAction> Server;

// 收到action的goal后调用该回调函数

void execute(const learning_communication::DoDishesGoalConstPtr& goal, Server* as)
{
    ros::Rate r(1);
    learning_communication::DoDishesFeedback feedback;
    ROS_INFO("Dishwasher %d is working.", goal->dishwasher_id);

    // 假设洗盘子的进度，并且按照1hz的频率发布进度feedback

    for(int i=1; i<=10; i++)
    {
        feedback.percent_complete = i * 10;
        as->publishFeedback(feedback);
        r.sleep();
    }

    // 当action完成后，向客户端返回结果

    ROS_INFO("Dishwasher %d finish working.", goal->dishwasher_id);
    as->setSucceeded();
}
int main(int argc, char** argv)
{
    ros::init(argc, argv, "do_dishes_server");
    ros::NodeHandle n;

    // 定义一个服务器

    Server server(n, "do_dishes", boost::bind(&execute, _1, &server), false);
    server.start();       // 服务器开始运行

    ros::spin();
    return 0;
}
```
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 4.实现一个动作客户端 </font></center></strong>
<ul>
<li>(1)初始化ROS节点</li><br>
<li>(2)创建动作客户端实例</li><br>
<li>(3)连接动作服务端</li><br>
<li>(4)发送动作目标</li><br>
<li>(5)根据不同类型的服务端反馈处理回调函数</li><br>
</ul>
动作客户端实例(`DoDishes_client.cpp`)如下：
```cpp
#include <actionlib/client/simple_action_client.h>

#include "learning_communication/DoDishesAction.h"

typedef actionlib::SimpleActionClient<learning_communication::DoDishesAction> Client;

// 当action完成后会调用该回调函数一次

void doneCb(const actionlib::SimpleClientGoalState& state,
        const learning_communication::DoDishesResultConstPtr& result)
{
    ROS_INFO("Yay! The dishes are now clean");
    ros::shutdown();
}

// 当action激活后会调用该回调函数一次

void activeCb()
{
    ROS_INFO("Goal just went active");
}

// 收到feedback后调用该回调函数

void feedbackCb(const learning_communication::DoDishesFeedbackConstPtr& feedback)
{
    ROS_INFO(" percent_complete : %f ", feedback->percent_complete);
}
int main(int argc, char** argv)
{
    ros::init(argc, argv, "do_dishes_client");
    Client client("do_dishes", true);     // 定义一个客户端

    // 等待服务器端

    ROS_INFO("Waiting for action server to start.");
    client.waitForServer();
    ROS_INFO("Action server started, sending goal.");
    // 创建一个action的goal

    learning_communication::DoDishesGoal goal;
    goal.dishwasher_id = 1;
    // 发送action的goal给服务器端，并且设置回调函数

    client.sendGoal(goal,  &doneCb, &activeCb, &feedbackCb);
    ros::spin();
    return 0;
}
```
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 5.编译代码 </font></center></strong>
<ul>
<li>(1)设置需要编译的代码和生成的可执行文件</li><br>
<li>(2)设置链接库</li><br>
<li>(3)设置依赖</li><br>
</ul>
实例(`cmakelists.txt`)如下：
```cmake
add_executable(DoDishes_client src/DoDishes_client.cpp)
target_link_libraries( DoDishes_client ${catkin_LIBRARIES})
add_dependencies(DoDishes_client ${${PROJECT_NAME}_EXPORTED_TARGETS})
add_executable(DoDishes_server src/DoDishes_server.cpp)
target_link_libraries( DoDishes_server ${catkin_LIBRARIES})
add_dependencies(DoDishes_server ${${PROJECT_NAME}_EXPORTED_TARGETS})
```
### <strong style="max-width: 100%;color: rgb(47, 85, 151);box-sizing: border-box !important;word-wrap: break-word !important;"><center><font face="楷体"> 6.运行可执行文件 </font></center></strong>
```bash
roscore
```
打开新终端：
```bash
rosrun learning_communication DoDishes_client
```
打开新终端：
```bash
rosrun learning_communication DoDishes_server
```

*************************


<style>
    .left-bottom .github-fork-ribbon {
        background-color: #DC143C;
    }
</style>


<div class="github-fork-ribbon-wrapper left-bottom hidden-xs">
    <div class="github-fork-ribbon">
        <a href="https://github.com/GJXS1980/SLXY_lesson_code/tree/master/lesson02">Fork me on GitHub</a>
    </div>
</div>

<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/github-fork-ribbon-css/0.1.1/gh-fork-ribbon.min.css" />


